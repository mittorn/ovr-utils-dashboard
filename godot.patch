diff --git a/servers/visual/visual_server_viewport.cpp b/servers/visual/visual_server_viewport.cpp
index 02cd448897..2827def580 100644
--- a/servers/visual/visual_server_viewport.cpp
+++ b/servers/visual/visual_server_viewport.cpp
@@ -292,7 +292,7 @@ void VisualServerViewport::draw_viewports() {
 			// In ARVR mode it is our interface that controls our size
 			if (arvr_interface.is_valid()) {
 				// override our size, make sure it matches our required size
-				vp->size = arvr_interface->get_render_targetsize();
+				//vp->size = arvr_interface->get_render_targetsize();
 			} else {
 				// reset this, we can't render the output without a valid interface (this will likely be so when we're in the editor)
 				vp->size = Vector2(0, 0);
@@ -325,7 +325,7 @@ void VisualServerViewport::draw_viewports() {
 			arvr_interface->commit_for_eye(leftOrMono, vp->render_target, vp->viewport_to_screen_rect);
 
 			// render right eye
-			if (leftOrMono == ARVRInterface::EYE_LEFT) {
+			/*if (leftOrMono == ARVRInterface::EYE_LEFT) {
 				// check for an external texture destination for our right eye
 				VSG::storage->render_target_set_external_texture(vp->render_target, arvr_interface->get_external_texture_for_eye(ARVRInterface::EYE_RIGHT), arvr_interface->get_external_depth_for_eye(ARVRInterface::EYE_RIGHT));
 
@@ -334,7 +334,7 @@ void VisualServerViewport::draw_viewports() {
 
 				_draw_viewport(vp, ARVRInterface::EYE_RIGHT);
 				arvr_interface->commit_for_eye(ARVRInterface::EYE_RIGHT, vp->render_target, vp->viewport_to_screen_rect);
-			}
+			}*/
 
 			// and for our frame timing, mark when we've finished committing our eyes
 			ARVRServer::get_singleton()->_mark_commit();
